{"name":"Stream-total","tagline":"total for stream json objects or array","body":"# stream-total\r\n\r\ntotal for stream json objects or array,iterator.it's collection toolkit part.\r\nsupport AMD or node.\r\n\r\n## example\r\n\r\n\r\n```coffeescript\r\ngenerator(100)\r\n.pipe(total(\r\n    ageAvg:\r\n      $avg: [\r\n        'age'\r\n      ]\r\n    count:\r\n      $count: '*'\r\n    sum:\r\n      ageSum:\r\n        $sum: 'age'\r\n      valueSum:\r\n        $sum:'value'\r\n    ageMax:\r\n      $max: [\r\n        'age'\r\n#        (doc) ->\r\n#          doc['value' ]\r\n      ]\r\n    minAge:\r\n      $min: ['age']\r\n    modeGrade:\r\n      $mode:'grade.name'\r\n    modeAge:\r\n      $mode : 'age'\r\n    avedev:\r\n      $avedev:'age'\r\n    stdev_s:\r\n      $stdev_s:['age']\r\n    stdev_p:\r\n      $stdev_p:'age'\r\n    custom:\r\n      $custom:'n_value'\r\n    product:\r\n      $product:'n_value'\r\n    trimmean:\r\n      $trimmean:['age',0.4]\r\n    frequency:\r\n      $frequency:\r\n        ['age', 18, 10\r\n         24\r\n          ->(console.log this; 45)\r\n         60]\r\n  ).stream()\r\n).on('data', (doc)->\r\n#console.log doc\r\n).once 'end', (result) ->\r\n  console.log result\r\n  console.log 'sum age:',total.select(result,'sum.ageSum')\r\n  console.log total.select(result,'frequency')[0].values\r\n```\r\n\r\nresult:\r\n\r\n```javascrip\r\n{ ageAvg: 32.303030303030305,\r\n  count: 99,\r\n  sum: { ageSum: 3198, valueSum: 500326 },\r\n  ageMax: 69,\r\n  minAge: 1,\r\n  modeGrade: 'grade 2',\r\n  modeAge: '31',\r\n  avedev: 16.524640342822156,\r\n  stdev_s: 19.70934438355788,\r\n  stdev_p: 19.609549593545182,\r\n  custom: 9.33262154439441e+155,\r\n  product: 9.33262154439441e+155,\r\n  trimmean: 31.62295081967213,\r\n  frequency: \r\n   [ { name: 'age<10', bound: 10, freq: 15 },\r\n     { name: '10<=age<18', bound: 18, freq: 12 },\r\n     { name: '18<=age<24', bound: 24, freq: 8 },\r\n     { name: '24<=age<45', bound: 45, freq: 33 },\r\n     { name: '45<=age<60', bound: 60, freq: 18 },\r\n     { name: 'age>=60', bound: 60, freq: 13 } ] }\r\n\r\n```\r\n\r\n## extend total function\r\n\r\nextend total function,you can use **total.use** define function.the function name's first char is **'$'**.\r\nexample:\r\n\r\n```javascript\r\ntotal.use('$custom', function(doc, count) {\r\n  var ret;\r\n  ret = total.sum(total.getValues(doc, this.args, count));\r\n  if (count === 1) {\r\n    return this.prevalue = ret;\r\n  } else {\r\n    return this.prevalue *= ret;\r\n  }\r\n});\r\n```\r\n**using '$custom' example:**\r\n\r\n```javascript\r\n\r\ngenerator(100)\r\n.pipe(total({product:{$custom:'age'}}).stream())\r\n.once('end',function(result){\r\n    console.log(result);\r\n});\r\n\r\n```\r\n\r\n## readArray example:\r\n\r\n```javascript\r\nvar onPost = onProgress = function(doc){\r\n    console.log(doc);\r\n};\r\n\r\nresult = total({product:{$custom:'age'}}).readArray([{age:15,id:'ba'}],onPost,onProgress);\r\n\r\nconsole.log(result);\r\n```\r\n\r\n## readIterator example:\r\n\r\n```javascript\r\n\r\nvar onPost = onProgress = function(doc){\r\n    console.log(doc);\r\n};\r\n\r\nvar data=[{age:15,id:'ba'}];\r\n\r\niterator ={\r\n    hasNext:function(){return data.length>0;},\r\n    next:function(){return data.shift();}\r\n}\r\n\r\nresult = total({product:{$custom:'age'}}).readIterator(iterator,onPost,onProgress);\r\n\r\nconsole.log(result);\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}